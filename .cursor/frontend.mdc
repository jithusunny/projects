---
description: 
globs: 
alwaysApply: false
---
# 📐 Cursor Rules

## 1. Vision / Philosophy / Design Principles

- Minimal, powerful, and expressive 
- Declarative over imperative 
- Explicit > Implicit 
- Reuse everything, repeat nothing 
- Components must be composable, modular, and standalone 
- Structure must be clear to both humans and AI 
- Styling must be functional, not ornamental 
- The codebase must be visually and structurally harmonious 
- Working on this should feel fun, clean, and poetic—not chaotic 
- Accessibility is non-negotiable: semantic HTML, tabindex, keyboard nav, ARIA roles, etc.

---

## 2. Strategy

- Use Lit for all UI — components and pages — with Shadow DOM enabled 
- Style everything using CSS custom properties (tokens), defined in `/styles/tokens.css` 
- Use Shoelace for accessible interactive primitives (buttons, inputs, dialogs, etc.) 
- Use vanilla JS modules for all logic, data, and behavior 
- Each page is a Lit component responsible for its own layout, data fetching, and rendering 
- Design is open to future expansion (context, shared events, state) but does not use global state now

---

## 3. Architecture Rules

### ✅ Do:
- Create a Lit component for any repeated or interactive UI unit 
- Fetch data in page components using `connectedCallback()` 
- Use `CustomEvent` for component-to-parent communication (`this.dispatchEvent(new CustomEvent(...))`) 
- Pass data to children via attributes or properties — never via globals or DOM queries 
- Use `<slot>` for layout/content projection, and properties for behavioral/configurable data 
- Use semantic HTML (`<section>`, `<article>`, `<button>`) wherever applicable 
- Handle loading and error states explicitly in all data-driven components 
- Structure all UI code into small, purpose-specific files 
- Define navigation routes in a single `router.js` or equivalent — no auto-routing by file structure 
- Write clear test selectors using `data-testid` for all testable DOM elements

### ❌ Don't:
- Use Tailwind, BEM, or global utility classes 
- Use global state, reactive libraries, or context sharing (yet) 
- Use class names for styling or state — style via `:host`, props, and `::part()` only 
- Use global event listeners or imperative DOM manipulation 
- Use div soup or hardcoded markup repetition 
- Mix layout logic into JavaScript behavior files 
- Leave fetches unguarded — always use `loading` and `error` guards in render()

---

## 4. Toolset

| Tool         | Purpose                                      |
|--------------|----------------------------------------------|
|   lit        | Web components with scoped styling and Shadow DOM  
|   shoelace   | Accessible, ready-to-use UI elements  
|   css vars   | Design tokens for color, spacing, sizing, etc.  
|   vanilla js  | Modular logic and API communication  
|   vite       | Build system and dev server  
|   playwright  | End-to-end testing only  

---

## 5. Naming Conventions

| Type           | Convention        | Example                        |
|----------------|-------------------|--------------------------------|
| Components     | kebab-case        | `<project-card>`               |
| Properties     | camelCase         | `.projectTitle = "Alpha"`      |
| Events         | kebab-case (scoped)| `project:created`, `chat:send`|
| Files/Folders  | kebab-case        | `project-detail-page.js`       |
| Test Selectors | kebab-case with domain | `data-testid="task-status"` |

---

## 6. File Structure

```
/frontend
├── index.html               # Entry point
├── main.js                  # Router + component registration
├── /components              # All Lit components (project-card.js, chat-pane.js, etc.)
├── /pages                   # Route-level views (projects-page.js, tasks-page.js, etc.)
├── /api                     # Data-fetching modules (project.js, task.js)
├── /styles
│   └── tokens.css           # CSS design tokens
├── /context                 # Reserved for future state or context sharing
├── /utils                   # JS utility functions (formatting, logic, etc.)
├── vite.config.js
└── /dist                    # Production output
```

---

## 7. Testing Rules

- Only use   Playwright   for real user-flow testing 
- Never test internal implementation details or logic 
- Always use `data-testid` attributes for selecting UI elements 
- Ensure tests cover:
  - Form submission
  - Modal interactions
  - Navigation toggles
  - Card/list rendering
- Test both keyboard accessibility and role-based visibility

---

## 8. State Management

- No global state or state libraries at this stage 
- All data is fetched and stored locally inside the page/component 
- Shared state, context, or cross-component communication is not active — structure is ready for it (`/context` folder) 
- Communication within a page/component tree is done via `CustomEvent` 
- Cursor must not introduce reactive libraries or hidden shared stores

---

## 9. Component Guidelines

- Every interactive or reusable visual unit must be a standalone Lit component 
- Use `static styles = css`` ` inside the component, scoped with Shadow DOM 
- Use CSS variables for any visual styling — no hardcoded styles 
- Support customization via attributes or properties, not classnames 
- Inside Shoelace components, customize using `::part()` only 
- All behavior must be encapsulated inside the component or a related JS module — never reach outside

---

## 10. Disallowed Tools & Patterns
We explicitly do not use or allow: React, Vue, Svelte, Angular, Tailwind, BEM, Handlebars, JSON schema-to-UI mappers, global state libraries (Redux, MobX, Zustand, etc.), or any abstraction that hides layout, logic, or markup clarity.